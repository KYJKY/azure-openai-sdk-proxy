@using AzureOpenAIProxy.PlaygroundApp.Models;

@using NodaTime
@using NodaTime.Extensions
@using NodaTime.TimeZones

<style>
    section {
        margin-bottom: 100px
    }
    .create-input-label {
        width: 200px;
        --type-ramp-base-font-size: 22px;
    }
    .create-fluent-stack {
        height: 100px;
    }
    .button-section {
        display: flex;
        justify-content: center;
        gap: 50px;
    }
    .button {
        width: 150px;
        height: 50px;
        font-size: 16px;
        margin: 0 10px;
    }
</style>

<FluentLayout Id="@Id">
    @if (adminEventDetails == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <FluentHeader>New Event</FluentHeader>
        <FluentBodyContent>
            <section>
                <h2>Event Infomation</h2>
            
                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-title" class="create-input-label">Title</FluentLabel>
                    <FluentTextField Id="event-title" Name="title" TextFieldType="TextFieldType.Text" Required  />
                </FluentStack>

                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-summary" class="create-input-label">Summary</FluentLabel>
                    <FluentTextField id="event-summary" TextFieldType="TextFieldType.Text" Required />
                </FluentStack>

                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-description" class="create-input-label">Description</FluentLabel>
                    <FluentTextArea Id="event-description" Style="width:300px" />
                </FluentStack>

                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-start-date" class="create-input-label">Event Start Date</FluentLabel>
                    <FluentDatePicker Id="event-start-date" Value="@adminEventDetails.DateStart.DateTime" ValueChanged="@(e => adminEventDetails.DateStart = e.Value.Date)" />
                    <FluentTimePicker Id="event-start-time" Value="@adminEventDetails.DateStart.DateTime" ValueChanged="@(e => adminEventDetails.DateStart = e.Value.Date + e.Value.TimeOfDay)" />
                </FluentStack>

                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-end-date" class="create-input-label">Event End Date</FluentLabel>
                    <FluentDatePicker Id="event-end-date" Value="@adminEventDetails.DateEnd.DateTime" ValueChanged="@(e => adminEventDetails.DateEnd = e.Value.Date)" />
                    <FluentTimePicker Id="event-end-time" Value="@adminEventDetails.DateEnd.DateTime" ValueChanged="@(e => adminEventDetails.DateEnd = e.Value.Date + e.Value.TimeOfDay)" />
                </FluentStack>

                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-timezone" class="create-input-label">Time Zone</FluentLabel>
                    <FluentSelect Id="event-timezone" Height="500px" TOption="string" Required>
                        @foreach (var timeZone in timeZoneList)
                        {
                            <FluentOption Value="@timeZone.Id">@timeZone.Id</FluentOption>
                        }
                    </FluentSelect>
                </FluentStack>
            </section>

            <section>
                <h2>Event Organizer</h2>

                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-organizer-name" class="create-input-label">Organizer Name</FluentLabel>
                    <FluentTextField Id="event-organizer-name" TextFieldType="TextFieldType.Text" Required />
                </FluentStack>


                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-organizer-email" class="create-input-label">Organizer Email</FluentLabel>
                    <FluentTextField Id="event-organizer-email" TextFieldType="TextFieldType.Email" Required />
                </FluentStack>
            </section>
        
            <section>
                <h2>Event Coorganizers</h2>

                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-coorgnizer-name" class="create-input-label">Coorgnizer Name</FluentLabel>
                    <FluentTextField Id="event-coorgnizer-name" TextFieldType="TextFieldType.Text" Required />
                </FluentStack>

                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-coorgnizer-email" class="create-input-label">Coorgnizer Email</FluentLabel>
                    <FluentTextField Id="event-coorgnizer-email" TextFieldType="TextFieldType.Email" Required />
                </FluentStack>
            </section>

            <section>
                <h2>Event Configuration</h2>

                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-max-token-cap" class="create-input-label">Max Token Cap</FluentLabel>
                    <FluentNumberField Id="event-max-token-cap" @bind-Value="adminEventDetails.MaxTokenCap" Required />
                </FluentStack>

                <FluentStack class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-daily-request-cap" class="create-input-label">Daily Request Cap</FluentLabel>
                    <FluentNumberField Id="event-daily-request-cap" @bind-Value="adminEventDetails.DailyRequestCap" Required />
                </FluentStack>
            </section>

            <section class="button-section">
                <FluentButton Id="admin-event-detail-add" Appearance="Appearance.Accent" class="button" OnClick="AddEvent">Add Event</FluentButton>
                <FluentButton Id="admin-event-detail-cancel" Appearance="Appearance.Outline" class="button" OnClick="CancelEvent">Cancel</FluentButton>
            </section>
        </FluentBodyContent>
    }
</FluentLayout>


@code {
    private List<DateTimeZone>? timeZoneList;
    private AdminEventDetails? adminEventDetails;

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(100);

        adminEventDetails = adminEventDetails == null ? new() : adminEventDetails;
        DateTime currentTime = DateTime.Now;

        adminEventDetails.DateStart = currentTime.AddHours(1).AddMinutes(-currentTime.Minute);
        adminEventDetails.DateEnd = currentTime.AddDays(1).AddMinutes(-currentTime.Minute).AddHours(1);

        timeZoneList = DateTimeZoneProviders.Tzdb.GetAllZones().ToList();
    }

    private async Task AddEvent()
    {
        
    }

    private async Task CancelEvent()
    {

    }
}

